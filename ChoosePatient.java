/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package spectrex;


import static spectrex.MedLogin.idhs;
import static spectrex.PatientFound.resultSetToTableModel;
import spectrex.Seans;
import java.sql.*;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Kirill
 */
public class ChoosePatient extends javax.swing.JFrame {
    
    /**
     * Creates new form ChoosePatient
     */
    public static int idp;
    public Connection cn = MedLogin.cn;
    public ChoosePatient() {
        
        initComponents();
        java.awt.Dimension dim = getToolkit().getScreenSize();
        this.setLocation(dim.width/2 - this.getWidth()/2,
                dim.height/2 - this.getHeight()/2);
        try
         {                 
            Statement sta;        
            sta = cn.createStatement();        
            ResultSet rs;        
            rs = sta.executeQuery("select N_med_card, FIO, Gender, B_day, Tel, Passport, Acc_date, Disease, Allergy, E_mail, Inst_name, GroupName" 
                    + " from (patient p join institution i on p.IdInst = i.IdInst) join diagnosticgroup d on p.IdDG = d.IdDG");
            TableResultPatient.setModel(resultSetToTableModel(rs));
            
            
            Comparator myComparator = new java.util.Comparator() {
    /**
     * Custom compare to sort numbers as numbers.
     * Strings as strings, with numbers ordered before strings.
     * 
     * @param o1
     * @param o2
     * @return
     */
    @Override
    public int compare(Object oo1, Object oo2) {
        boolean isFirstNumeric, isSecondNumeric;
        String o1 = oo1.toString(), o2 = oo2.toString();

        isFirstNumeric = o1.matches("\\d+");
        isSecondNumeric = o2.matches("\\d+");

        if (isFirstNumeric) {
            if (isSecondNumeric) {
                return Integer.valueOf(o1).compareTo(Integer.valueOf(o2));
            } else {
                return -1; // numbers always smaller than letters
            }
        } else {
            if (isSecondNumeric) {
                return 1; // numbers always smaller than letters
            } else {
                // Those lines throw ArrayIndexOutOfBoundsException
                //                        isFirstNumeric = o1.split("[^0-9]")[0].matches("\\d+");
                //                        isSecondNumeric = o2.split("[^0-9]")[0].matches("\\d+");

                // Trying to parse String to Integer.
                // If there is no Exception then Object is numeric, else it's not.
                try{
                    Integer.parseInt(o1);
                    isFirstNumeric = true;
                }catch(NumberFormatException e){
                    isFirstNumeric = false;
                }
                try{
                    Integer.parseInt(o2);
                    isSecondNumeric = true;
                }catch(NumberFormatException e){
                    isSecondNumeric = false;
                }

                if (isFirstNumeric) {
                    if (isSecondNumeric) {
                        int intCompare = Integer.valueOf(o1.split("[^0-9]")[0]).compareTo(Integer.valueOf(o2.split("[^0-9]")[0]));
                        if (intCompare == 0) {
                            return o1.compareToIgnoreCase(o2);
                        }
                        return intCompare;
                    } else {
                        return -1; // numbers always smaller than letters
                    }
                } else {
                    if (isSecondNumeric) {
                        return 1; // numbers always smaller than letters
                    } else {
                        return o1.compareToIgnoreCase(o2);
                    }
                }
            }
        }
    }
};

TableRowSorter sorter = new TableRowSorter();
TableResultPatient.setRowSorter(sorter);
sorter.setModel(TableResultPatient.getModel());
sorter.setComparator(0, myComparator);
 

         //   TableResultPatient.setAutoCreateRowSorter(true);
        } catch (SQLException ex) {
            Logger.getLogger(ChoosePatient.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableResultPatient = new javax.swing.JTable();
        ButtonChoose = new javax.swing.JButton();
        ButtonCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        TextFieldChoosePatient = new javax.swing.JTextField();
        ButtonViewSessions = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("spectrex/Bundle"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ChoosePatient.jPanel1.border.title"))); // NOI18N

        TableResultPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(TableResultPatient);

        ButtonChoose.setText(bundle.getString("ChoosePatient.ButtonChoose.text")); // NOI18N
        ButtonChoose.setToolTipText(bundle.getString("ChoosePatient.ButtonChoose.toolTipText")); // NOI18N
        ButtonChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonChooseActionPerformed(evt);
            }
        });

        ButtonCancel.setText(bundle.getString("ChoosePatient.ButtonCancel.text")); // NOI18N
        ButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("ChoosePatient.jLabel1.text")); // NOI18N

        TextFieldChoosePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldChoosePatientActionPerformed(evt);
            }
        });

        ButtonViewSessions.setText(bundle.getString("ChoosePatient.ButtonViewSessions.text")); // NOI18N
        ButtonViewSessions.setToolTipText(bundle.getString("ChoosePatient.ButtonViewSessions.toolTipText")); // NOI18N
        ButtonViewSessions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonViewSessionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(TextFieldChoosePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonChoose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonViewSessions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonCancel)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonCancel)
                    .addComponent(TextFieldChoosePatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(ButtonViewSessions)
                    .addComponent(ButtonChoose))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonChooseActionPerformed
        try {
            String medcard = TextFieldChoosePatient.getText();
            Statement sta = cn.createStatement();
            ResultSet rs;
            rs = sta.executeQuery("select IdP from patient where N_med_card = " + medcard);
            if(rs.first())
            idp = rs.getInt("IdP");
            this.dispose();
            //   JOptionPane.showMessageDialog(null, "idp = " + idp);
        } catch (SQLException ex) {
            Logger.getLogger(ChoosePatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonChooseActionPerformed

    private void ButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_ButtonCancelActionPerformed

    private void TextFieldChoosePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldChoosePatientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldChoosePatientActionPerformed

    private void ButtonViewSessionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonViewSessionsActionPerformed
        try {
            Statement sta = cn.createStatement();
            ResultSet rs;
            String medcard = TextFieldChoosePatient.getText();
            ResultSet rs1;
            rs1 = sta.executeQuery("select IdP from patient where N_med_card = " + medcard + ";");
            if(rs1.first())
            idp = rs1.getInt("IdP");
            
            rs = sta.executeQuery("select IdS, N_med_card, FIO, Disease, Session_date, Diagnosis, GroupName, HSFIO " +
                "from (((patient p join seans s on p.IdP = s.IdP) " +
                "join hospitalstaff h on h.IdHS = s.IdHS)) join diagnosticgroup d on s.IdDG = d.IdDG " +
                "where p.IdP = " + idp);
            this.dispose();
            new PatientFound(rs, 2);
        }
        catch(SQLException ex)
        {
            Logger.getLogger(PatientRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
        //   logQuery("select (seans with 1 patient)");
    }//GEN-LAST:event_ButtonViewSessionsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChoosePatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChoosePatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChoosePatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChoosePatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChoosePatient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCancel;
    private javax.swing.JButton ButtonChoose;
    private javax.swing.JButton ButtonViewSessions;
    private javax.swing.JTable TableResultPatient;
    private javax.swing.JTextField TextFieldChoosePatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
