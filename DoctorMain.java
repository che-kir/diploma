/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spectrex;

import java.awt.BorderLayout;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicArrowButton;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import static spectrex.ChoosePatient.idp;
import static spectrex.MedLogin.cn;
import static spectrex.MedLogin.idhs;
import static spectrex.MedMainOld.checkWithRegExpNumber;
import static spectrex.Seans.ids;

/**
 *
 * @author Kirill
 */
public class DoctorMain extends javax.swing.JFrame {

    public Connection cn = MedLogin.cn;
    public static String numcard = "";
    public DefaultListModel listModelLeft = new DefaultListModel();
    public DefaultListModel listModelRight = new DefaultListModel();

    public DoctorMain() {
        initComponents();

        java.awt.Dimension dim = getToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getWidth() / 2,
                dim.height / 2 - this.getHeight() / 2);

        tableOfQueries.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                JTable table = (JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                String dateFrom = "", dateTo = "", text = "";
                if (tableOfQueries.getValueAt(row, 1) != null) {
                    text = tableOfQueries.getValueAt(row, 1).toString();
                }
                if (tableOfQueries.getValueAt(row, 2) != null) {
                    dateFrom = tableOfQueries.getValueAt(row, 2).toString();
                }
                if (tableOfQueries.getValueAt(row, 3) != null) {
                    dateTo = tableOfQueries.getValueAt(row, 3).toString();
                }
                if (me.getClickCount() == 3) {
                    QueryOfPatient query = new QueryOfPatient();
                    query.getQuery(row + 1, text, dateFrom, dateTo);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doctorMain_TabbedPane = new javax.swing.JTabbedPane();
        findingPatientCard_CommonPanel = new javax.swing.JPanel();
        findingPatientCard_SurnameText = new javax.swing.JTextField();
        findingPatientCard_LabelCardNumber = new javax.swing.JLabel();
        findingPatientCard_LabelSurname = new javax.swing.JLabel();
        findingPatientCard_MedCardText = new javax.swing.JTextField();
        findingPatientCard_LabelName = new javax.swing.JLabel();
        findingPatientCard_NameText = new javax.swing.JTextField();
        findingPatientCard_LabelMiddleName = new javax.swing.JLabel();
        findingPatientCard_MiddleNameText = new javax.swing.JTextField();
        findingPatientCard_ButtonFindPatient = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableOfQueries = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        reports_ListOfSessionsRight = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        reports_ListOfSessionssLeft = new javax.swing.JList();
        ButtonToRight = new javax.swing.JButton();
        ButtonToLeft = new javax.swing.JButton();
        ButtonShowSeans = new javax.swing.JButton();
        ButtonCreateReport = new javax.swing.JButton();
        reports_LabelSessions = new javax.swing.JLabel();
        reports_LabelReports = new javax.swing.JLabel();
        ButtonEmail = new javax.swing.JButton();
        session_CommonPanel = new javax.swing.JPanel();
        session_ButtonViewSessions = new javax.swing.JButton();
        session_ButtonNewSession = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setForeground(java.awt.Color.lightGray);
        setResizable(false);

        findingPatientCard_CommonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        findingPatientCard_SurnameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findingPatientCard_SurnameTextActionPerformed(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("spectrex/Bundle"); // NOI18N
        findingPatientCard_LabelCardNumber.setText(bundle.getString("DoctorMain.findingPatientCard_LabelCardNumber.text")); // NOI18N

        findingPatientCard_LabelSurname.setText(bundle.getString("DoctorMain.findingPatientCard_LabelSurname.text")); // NOI18N

        findingPatientCard_MedCardText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findingPatientCard_MedCardTextActionPerformed(evt);
            }
        });

        findingPatientCard_LabelName.setText(bundle.getString("DoctorMain.findingPatientCard_LabelName.text")); // NOI18N

        findingPatientCard_NameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findingPatientCard_NameTextActionPerformed(evt);
            }
        });

        findingPatientCard_LabelMiddleName.setText(bundle.getString("DoctorMain.findingPatientCard_LabelMiddleName.text")); // NOI18N

        findingPatientCard_MiddleNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findingPatientCard_MiddleNameTextActionPerformed(evt);
            }
        });

        findingPatientCard_ButtonFindPatient.setText(bundle.getString("DoctorMain.findingPatientCard_ButtonFindPatient.text_1")); // NOI18N
        findingPatientCard_ButtonFindPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findingPatientCard_ButtonFindPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout findingPatientCard_CommonPanelLayout = new javax.swing.GroupLayout(findingPatientCard_CommonPanel);
        findingPatientCard_CommonPanel.setLayout(findingPatientCard_CommonPanelLayout);
        findingPatientCard_CommonPanelLayout.setHorizontalGroup(
            findingPatientCard_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findingPatientCard_CommonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findingPatientCard_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(findingPatientCard_CommonPanelLayout.createSequentialGroup()
                        .addComponent(findingPatientCard_LabelCardNumber)
                        .addGap(37, 37, 37)
                        .addComponent(findingPatientCard_MedCardText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addGroup(findingPatientCard_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(findingPatientCard_LabelSurname)
                            .addComponent(findingPatientCard_LabelName)
                            .addComponent(findingPatientCard_LabelMiddleName))
                        .addGap(37, 37, 37)
                        .addGroup(findingPatientCard_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(findingPatientCard_SurnameText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(findingPatientCard_NameText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(findingPatientCard_MiddleNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(findingPatientCard_ButtonFindPatient))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        findingPatientCard_CommonPanelLayout.setVerticalGroup(
            findingPatientCard_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findingPatientCard_CommonPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(findingPatientCard_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(findingPatientCard_CommonPanelLayout.createSequentialGroup()
                        .addGroup(findingPatientCard_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(findingPatientCard_LabelSurname)
                            .addComponent(findingPatientCard_SurnameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(findingPatientCard_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(findingPatientCard_LabelName)
                            .addComponent(findingPatientCard_NameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(findingPatientCard_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(findingPatientCard_LabelMiddleName)
                            .addComponent(findingPatientCard_MiddleNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(findingPatientCard_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(findingPatientCard_LabelCardNumber)
                        .addComponent(findingPatientCard_MedCardText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addComponent(findingPatientCard_ButtonFindPatient)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        doctorMain_TabbedPane.addTab(bundle.getString("DoctorMain.findingPatientCard_CommonPanel.TabConstraints.tabTitle"), findingPatientCard_CommonPanel); // NOI18N

        tableOfQueries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Сколько раз пациентам за прошлый месяц поставили заданный диагноз?", null, null, null},
                {"Кто из пациентов родился в заданный период?", null, "ГГГГ-ММ-ДД", "ГГГГ-ММ-ДД"},
                {"Кто из пациентов поступил на учет в заданный период?", null, "ГГГГ-ММ-ДД", "ГГГГ-ММ-ДД"},
                {"Кто из пациентов проживает по заданному району? (факт. адрес)", null, null, null},
                {"Кто из пациентов относится к заданной диагностической группе?", null, null, null},
                {"Кто из пациентов не присутствовал ни на одном сеансе?", null, null, null},
                {"Сколько пациентов направило на обследование каждое учреждение? ", null, null, null}
            },
            new String [] {
                "Название запроса", "Поле ввода", "С ... даты", "По ... дату"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tableOfQueries);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addContainerGap())
        );

        doctorMain_TabbedPane.addTab(bundle.getString("DoctorMain.jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        jScrollPane3.setViewportView(reports_ListOfSessionsRight);

        jScrollPane4.setViewportView(reports_ListOfSessionssLeft);

        ButtonToRight.setText(bundle.getString("DoctorMain.ButtonToRight.text")); // NOI18N
        ButtonToRight.setFocusTraversalPolicyProvider(true);
        ButtonToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonToRightActionPerformed(evt);
            }
        });

        ButtonToLeft.setText(bundle.getString("DoctorMain.ButtonToLeft.text")); // NOI18N
        ButtonToLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonToLeftActionPerformed(evt);
            }
        });

        ButtonShowSeans.setText(bundle.getString("DoctorMain.ButtonShowSeans.text")); // NOI18N
        ButtonShowSeans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonShowSeansActionPerformed(evt);
            }
        });

        ButtonCreateReport.setText(bundle.getString("DoctorMain.ButtonCreateReport.text")); // NOI18N
        ButtonCreateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCreateReportActionPerformed(evt);
            }
        });

        reports_LabelSessions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reports_LabelSessions.setText(bundle.getString("DoctorMain.reports_LabelSessions.text")); // NOI18N

        reports_LabelReports.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reports_LabelReports.setText(bundle.getString("DoctorMain.reports_LabelReports.text")); // NOI18N

        ButtonEmail.setText(bundle.getString("DoctorMain.ButtonEmail.text")); // NOI18N
        ButtonEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEmailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ButtonToRight)
                            .addComponent(ButtonToLeft)))
                    .addComponent(ButtonShowSeans)
                    .addComponent(reports_LabelSessions, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reports_LabelReports, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(ButtonEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonCreateReport, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(175, 175, 175))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reports_LabelSessions)
                    .addComponent(reports_LabelReports))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(ButtonToRight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonToLeft)))
                .addGap(37, 37, 37)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonShowSeans)
                    .addComponent(ButtonCreateReport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonEmail)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        doctorMain_TabbedPane.addTab(bundle.getString("DoctorMain.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        session_ButtonViewSessions.setText(bundle.getString("DoctorMain.session_ButtonViewSessions.text")); // NOI18N
        session_ButtonViewSessions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                session_ButtonViewSessionsActionPerformed(evt);
            }
        });

        session_ButtonNewSession.setText(bundle.getString("DoctorMain.session_ButtonNewSession.text")); // NOI18N
        session_ButtonNewSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                session_ButtonNewSessionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout session_CommonPanelLayout = new javax.swing.GroupLayout(session_CommonPanel);
        session_CommonPanel.setLayout(session_CommonPanelLayout);
        session_CommonPanelLayout.setHorizontalGroup(
            session_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(session_CommonPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(session_ButtonViewSessions)
                .addGap(122, 122, 122)
                .addComponent(session_ButtonNewSession)
                .addContainerGap(254, Short.MAX_VALUE))
        );
        session_CommonPanelLayout.setVerticalGroup(
            session_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(session_CommonPanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(session_CommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(session_ButtonViewSessions)
                    .addComponent(session_ButtonNewSession))
                .addContainerGap(184, Short.MAX_VALUE))
        );

        doctorMain_TabbedPane.addTab(bundle.getString("DoctorMain.session_CommonPanel.TabConstraints.tabTitle"), session_CommonPanel); // NOI18N

        jButton1.setText(bundle.getString("DoctorMain.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doctorMain_TabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(doctorMain_TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findingPatientCard_ButtonFindPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findingPatientCard_ButtonFindPatientActionPerformed
        try {

            numcard = findingPatientCard_MedCardText.getText();

            if (!checkWithRegExpNumber(numcard) && !numcard.equals("")) {
                JOptionPane.showMessageDialog(null, "Некорректный ввод номера карты");
            } else if (numcard.equals("")) {
                try {
                    if (findingPatientCard_SurnameText.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Введите фамилию");
                    } else if (findingPatientCard_NameText.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Введите имя");
                    } else if (findingPatientCard_MiddleNameText.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Введите отчество");
                    } else {
                        String fio = findingPatientCard_SurnameText.getText() + " " + findingPatientCard_NameText.getText() + " " + findingPatientCard_MiddleNameText.getText();
                        Statement sta = cn.createStatement();
                        ResultSet rs;
                        rs = sta.executeQuery("select N_med_card from patient where FIO like '%" + fio + "%'");
                        if (rs.next()) {
                            new PatientCard(rs.getString("N_med_card")).setVisible(true);
                        } else {
                            JOptionPane.showMessageDialog(null, "Такой пациент не найден");
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PatientRegistration.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (checkWithRegExpNumber(numcard)) {
                Statement sta = cn.createStatement();
                ResultSet rs;
                rs = sta.executeQuery("select N_med_card, FIO, Gender, B_day, Tel, Passport, Acc_date, Disease, Allergy, E_mail, Inst_name, GroupName"
                        + " from (patient p join institution i on p.IdInst = i.IdInst) join diagnosticgroup d on p.IdDG = d.IdDG where N_med_card = " + numcard);
                new PatientCard(numcard).setVisible(true);
            }

        } catch (SQLException ex) {
            Logger.getLogger(PatientRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_findingPatientCard_ButtonFindPatientActionPerformed

    private void findingPatientCard_MiddleNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findingPatientCard_MiddleNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findingPatientCard_MiddleNameTextActionPerformed

    private void findingPatientCard_NameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findingPatientCard_NameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findingPatientCard_NameTextActionPerformed

    private void findingPatientCard_MedCardTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findingPatientCard_MedCardTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findingPatientCard_MedCardTextActionPerformed

    private void findingPatientCard_SurnameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findingPatientCard_SurnameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findingPatientCard_SurnameTextActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        new MedLogin().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ButtonToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonToRightActionPerformed
        try {
            listModelRight.addElement(reports_ListOfSessionssLeft.getSelectedValue().toString());
            reports_ListOfSessionsRight.setModel(listModelRight);
            reports_ListOfSessionsRight.repaint();

            if (reports_ListOfSessionssLeft.getSelectedIndex() >= 0) {
                listModelLeft.remove(reports_ListOfSessionssLeft.getSelectedIndex());
            }
            reports_ListOfSessionssLeft.setModel(listModelLeft);
            reports_ListOfSessionssLeft.repaint();
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Выберите дату сеанса слева (если даты нет, то не выбран пациент, либо он не проходил сеанс ещё)");
        }
    }//GEN-LAST:event_ButtonToRightActionPerformed

    private void ButtonToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonToLeftActionPerformed
        try {
            listModelLeft.addElement(reports_ListOfSessionsRight.getSelectedValue().toString());
            reports_ListOfSessionssLeft.setModel(listModelLeft);
            reports_ListOfSessionssLeft.repaint();

            if (reports_ListOfSessionsRight.getSelectedIndex() >= 0) {
                listModelRight.remove(reports_ListOfSessionsRight.getSelectedIndex());
            }
            reports_ListOfSessionsRight.setModel(listModelRight);
            reports_ListOfSessionsRight.repaint();
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Выберите дату сеанса справа");
        }
    }//GEN-LAST:event_ButtonToLeftActionPerformed

    private void ButtonShowSeansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonShowSeansActionPerformed
        if (numcard.equals("")) {
            JOptionPane.showMessageDialog(null, "Выберите карту пациента");
        } else {
            try {
                Statement sta = cn.createStatement();
                ResultSet rs;
                ResultSet rs1;
                rs1 = sta.executeQuery("select IdP from patient where N_med_card = " + numcard + ";");
                if (rs1.first()) {
                    idp = rs1.getInt("IdP");
                }

                rs = sta.executeQuery("select IdS, N_med_card, FIO, Disease, Session_date, Diagnosis, GroupName, HSFIO "
                        + "from (((patient p join seans s on p.IdP = s.IdP) "
                        + "join hospitalstaff h on h.IdHS = s.IdHS)) join diagnosticgroup d on s.IdDG = d.IdDG "
                        + "where p.IdP = " + idp);
                // DefaultListModel listModel = new DefaultListModel();           
                listModelLeft.clear();
                listModelRight.clear();
                while (rs.next()) {
                    listModelLeft.addElement(rs.getString("Session_date"));

                }
                reports_ListOfSessionssLeft.setModel(listModelLeft);
            } catch (SQLException ex) {
                Logger.getLogger(PatientRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }//GEN-LAST:event_ButtonShowSeansActionPerformed

    private void ButtonCreateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCreateReportActionPerformed
        try {
            Statement sta = cn.createStatement();
            ResultSet rs;
            ResultSet rs1;
            int idss = 0, idpp = 0, idhss = 0;
            rs1 = sta.executeQuery("select IdP from patient where N_med_card = " + numcard + ";");
            if (rs1.first()) {
                idpp = rs1.getInt("IdP");
            }

            rs = sta.executeQuery("select IdS, N_med_card, FIO, Disease, Session_date, Diagnosis, GroupName, s.IdHS, HSFIO "
                    + "from (((patient p join seans s on p.IdP = s.IdP) "
                    + "join hospitalstaff h on h.IdHS = s.IdHS)) join diagnosticgroup d on s.IdDG = d.IdDG "
                    + "where p.IdP = " + idp + " and Session_date = '" + reports_ListOfSessionsRight.getSelectedValue().toString() + "';");

            if (rs.next()) {
                idss = rs.getInt("IdS");
                idhss = rs.getInt("s.IdHS");
            }
            System.out.println(idss + " " + idpp + " " + idhss);
            String param_seans = "param_seans";
            String param_patient = "param_patient";
            String param_doctor = "param_doctor";
            String jasperReport;
            jasperReport = "spectrex/report4.jasper";
            InputStream is = this.getClass().getClassLoader().getResourceAsStream(jasperReport);
            Map<String, Object> params = new HashMap<String, Object>();
            params.put(param_seans, idss);
            params.put(param_patient, idpp);
            params.put(param_doctor, idhss);
            JasperPrint jasperPrint = JasperFillManager.fillReport(is, params, cn);

            JasperViewer jv = new JasperViewer(jasperPrint);
            JDialog viewer = new JDialog(this, "Report", true);
            viewer.setBounds(jv.getBounds());
            viewer.getContentPane().add(jv.getContentPane());
            viewer.setResizable(true);
            viewer.setIconImage(jv.getIconImage());
            viewer.setVisible(true);

        } catch (JRException exc) {
            System.out.println(exc.getMessage());
        } catch (NullPointerException exc) {
            System.out.println(exc.getMessage());
        } catch (SQLException ex) {
            Logger.getLogger(DoctorMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonCreateReportActionPerformed

    private void ButtonEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEmailActionPerformed
        new EmailSender().setVisible(true);
    }//GEN-LAST:event_ButtonEmailActionPerformed

    private void session_ButtonViewSessionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_session_ButtonViewSessionsActionPerformed
        if (numcard.equals("")) {
            JOptionPane.showMessageDialog(null, "Выберите карту пациента");
        } else {
            new Seans().setVisible(true);
        }
    }//GEN-LAST:event_session_ButtonViewSessionsActionPerformed

    private void session_ButtonNewSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_session_ButtonNewSessionActionPerformed
        if (numcard.equals("")) {
            JOptionPane.showMessageDialog(null, "Выберите карту пациента");
        } else {
            try {
                Statement sta = cn.createStatement();
                ResultSet rs;
                ResultSet rs1;
                rs1 = sta.executeQuery("select IdP from patient where N_med_card = " + numcard + ";");
                if (rs1.first()) {
                    idp = rs1.getInt("IdP");
                }

                rs = sta.executeQuery("select IdS, N_med_card, FIO, Disease, Session_date, Diagnosis, GroupName, HSFIO "
                        + "from (((patient p join seans s on p.IdP = s.IdP) "
                        + "join hospitalstaff h on h.IdHS = s.IdHS)) join diagnosticgroup d on s.IdDG = d.IdDG "
                        + "where p.IdP = " + idp);
                new PatientFound(rs, 2);
            } catch (SQLException ex) {
                Logger.getLogger(PatientRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_session_ButtonNewSessionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCreateReport;
    private javax.swing.JButton ButtonEmail;
    private javax.swing.JButton ButtonShowSeans;
    private javax.swing.JButton ButtonToLeft;
    private javax.swing.JButton ButtonToRight;
    private javax.swing.JTabbedPane doctorMain_TabbedPane;
    private javax.swing.JButton findingPatientCard_ButtonFindPatient;
    private javax.swing.JPanel findingPatientCard_CommonPanel;
    private javax.swing.JLabel findingPatientCard_LabelCardNumber;
    private javax.swing.JLabel findingPatientCard_LabelMiddleName;
    private javax.swing.JLabel findingPatientCard_LabelName;
    private javax.swing.JLabel findingPatientCard_LabelSurname;
    private javax.swing.JTextField findingPatientCard_MedCardText;
    private javax.swing.JTextField findingPatientCard_MiddleNameText;
    private javax.swing.JTextField findingPatientCard_NameText;
    private javax.swing.JTextField findingPatientCard_SurnameText;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel reports_LabelReports;
    private javax.swing.JLabel reports_LabelSessions;
    private javax.swing.JList reports_ListOfSessionsRight;
    private javax.swing.JList reports_ListOfSessionssLeft;
    private javax.swing.JButton session_ButtonNewSession;
    private javax.swing.JButton session_ButtonViewSessions;
    private javax.swing.JPanel session_CommonPanel;
    private javax.swing.JTable tableOfQueries;
    // End of variables declaration//GEN-END:variables
}
